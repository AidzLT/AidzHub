repeat wait() until game:IsLoaded() 

loadstring(game:HttpGet("https://raw.githubusercontent.com/Novaz5792/X/main/X"))() 
--loadstring(game:HttpGet("https://raw.githubusercontent.com/Novaz5792/X/main/Y"))() 

if game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping") then 
    game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping").OnClientInvoke = function(Novaz5792) 
        task.wait(5)
        return true 
    end 
end 

local clans = {}
local rarities = {"Common", "UnCommon", "Rare", "Legendary", "Mythic", "Supreme"} 

for i,v in pairs(require(game:GetService("ReplicatedStorage").Modules.Global["Random_Clan_Picker"])) do 
    if table.find(rarities, i) then 
        for i1,v1 in pairs(v) do 
            table.insert(clans, v1)
        end 
    end 
end 

local demonarts = {}

for i,v in pairs(require(game:GetService("ReplicatedStorage").Modules.Global["Random_Demon_Art_Picker"]).Demon_Arts) do 
    if v ~= "None" then 
        table.insert(demonarts, v)
    end 
end 

local bossnames = {}

if Workspace:FindFirstChild("Mobs") and Workspace.Mobs:FindFirstChild("Bosses") then 
    for i,v in pairs(Workspace.Mobs.Bosses:GetChildren()) do 
        if v:FindFirstChild("Npc_Configuration") then 
            table.insert(bossnames, require(v.Npc_Configuration).Name) 
        end 
        for i1,v1 in pairs(v:GetChildren()) do 
            if v1:FindFirstChild("Npc_Configuration") then 
                table.insert(bossnames, require(v1.Npc_Configuration).Name)
            end 
        end 
    end 
end 

local mobnames = {}

if Workspace:FindFirstChild("Mobs") then 
    for i,v in pairs(Workspace.Mobs:GetDescendants()) do 
        if (Workspace.Mobs:FindFirstChild("Bosses") and (not v:IsDescendantOf(Workspace.Mobs.Bosses))) or true then 
            if v:FindFirstChild("Npc_Configuration") and (not table.find(mobnames, require(v.Npc_Configuration).Name)) and (not table.find(bossnames, require(v.Npc_Configuration).Name)) then 
                table.insert(mobnames, require(v.Npc_Configuration).Name)
            end 
        end 
    end 
end 


local mobs = {} 

if Workspace:FindFirstChild("Mobs") then 
    for i,v in pairs(Workspace.Mobs:GetDescendants()) do 
        if v:FindFirstChild("Npc_Configuration") and v:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Npc_Configuration) 
            table.insert(mobs, {v, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
        if v.Parent:FindFirstChild("Npc_Configuration") and v.Parent:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Parent.Npc_Configuration) 
            table.insert(mobs, {v.Parent, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
    end 
    
    Workspace.Mobs.DescendantAdded:Connect(function(v)
        if v:FindFirstChild("Npc_Configuration") and v:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Npc_Configuration) 
            table.insert(mobs, {v, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
        if v.Parent:FindFirstChild("Npc_Configuration") and v.Parent:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Parent.Npc_Configuration) 
            table.insert(mobs, {v.Parent, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
    end)
    
    Workspace.Mobs.DescendantRemoving:Connect(function(v)
        if v:IsA("Configuration") then 
            for i1,v1 in ipairs(mobs) do 
                if v1[1] == v then 
                    table.remove(mobs, i1)
                end 
            end 
        end 
    end) 
end 

function getclosestmob()
    local ret = {{nil, Vector3.new()}, Huge} 
    for i,v in pairs(mobs) do
        local model = v[1]:FindFirstChildOfClass("Model")
        if model and model:FindFirstChild("Humanoid") and model.Humanoid.Health > 0 then  
            local combined = {}
            if bossess and #bossess > 0 then 
                for i,v in pairs(bossess) do 
                    table.insert(combined, v)
                end 
            end 
            if mobss and #mobss > 0 then 
                for i,v in pairs(mobss) do 
                    table.insert(combined, v)
                end 
            end 
            if combined and #combined > 0 and (not table.find(combined, require(v[1].Npc_Configuration).Name)) then 
                continue 
            end 
            if model:FindFirstChild("HumanoidRootPart") and v[2] then 
                local magnitude1 = (HumanoidRootPart.Position - model:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if magnitude1 < ret[2] then 
                    ret[2] = magnitude1 
                    ret[1][1] = model 
                    ret[1][2] = v[2]
                end 
            elseif v[2] then
                local magnitude = (HumanoidRootPart.Position - v[2]).Magnitude 
                if magnitude < ret[2] then 
                    ret[2] = magnitude 
                    ret[1][1] = model 
                    ret[1][2] = v[2] 
                end 
            end 
        end 
    end
    return ret[1]
end 

local lib = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local subs = lib.subs 
local libclose = subs.Wait

local window = lib:CreateWindow({
    Name = "Novaz#5792",
    Themeable = {
        Info = {"Kalas A Skid"},
        Credit = false, 
        Background = "",
        Visible = true
    }
})

local main1 = window:CreateTab({
    Name = "Map 1/2/Dungeon"
})

--[[local main2 = window:CreateTab({
    Name = "Dungeon/Mugen"
})]]

local main3 = window:CreateTab({
    Name = "Misc"
})

local section1 = main1:CreateSection({
    Name = "Main"
})

local section2 = main1:CreateSection({
    Name = "Kill Aura", 
    Side = "Right"
})

local section3 = main1:CreateSection({
    Name = "Tasks"
})

local section4 = main1:CreateSection({
    Name = "Teleports",
    Side = "Right"
})

local miscmain = main3:CreateSection({
    Name = "Main"
})

local miscspins = main3:CreateSection({
    Name = "Spins"
})

local miscmoney = main3:CreateSection({
    Name = "Money"
})

local misctroll = main3:CreateSection({
    Name = "Troll",
    Side = "Right"
})

local miscdungeon = main3:CreateSection({
    Name = "Dungeon",
    Side = "Right"
})

local miscmisc = main3:CreateSection({
    Name = "Misc",
    Side = "Right"
})

Stepped:Connect(function()
    if a or af or acmd then 
        for i,v in pairs(Character:GetChildren()) do 
            if v.IsA(v, "BasePart") and v.CanCollide then 
                v.CanCollide = false 
            end 
        end 
        HumanoidRootPart.Velocity = Vector3.zero
    end 
    
    if math.floor(ws) ~= 16 then 
        Humanoid.WalkSpeed = ws 
    end 
    
    if math.floor(jp) ~= 50 then 
        Humanoid.JumpPower = jp 
    end 
end)

local lasttick = tick()
local curenemy
local debounce = false 
local lasttween 
local bindable = Instance.new("BindableEvent")
local killauraready = false 
section1:AddToggle({
    Name = "Auto Farm",
    Value = false,
    Flag = "Auto Farm", 
    Callback = function(state)
        a = state 
        while a do 
            local target = getclosestmob()
            if target and target[1] and target[2] then 
                if (not target[1]:FindFirstChild("HumanoidRootPart")) then 
                    if lasttween then 
                        lasttween:Pause()
                    end 
                    if curenemy ~= target[1] then 
                        curenemy = target[1]
                        lasttick = tick()
                    end 
                    if curenemy == target[1] and tick() - lasttick > 20 then 
                        for i,v in ipairs(mobs) do 
                            if v[1] == target[1].Parent then 
                                table.remove(mobs, i)
                            end 
                        end 
                    end 
                    lasttween = TweenService:Create(HumanoidRootPart, TweenInfo.new((HumanoidRootPart.Position - target[2]).Magnitude / 500, Enum.EasingStyle.Linear), {CFrame = CFrame.new(target[2])})
                    lasttween:Play()
                elseif (target[1]:FindFirstChild("HumanoidRootPart")) then 
                    if (HumanoidRootPart.Position - target[1].HumanoidRootPart.Position).Magnitude > 100 then 
                        if lasttween then 
                            lasttween:Pause() 
                        end 
                        lasttween = TweenService:Create(HumanoidRootPart, TweenInfo.new((HumanoidRootPart.Position - target[1].HumanoidRootPart.Position).Magnitude / 500, Enum.EasingStyle.Linear), {CFrame = target[1].HumanoidRootPart.CFrame})
                        lasttween:Play()
                    elseif (HumanoidRootPart.Position - target[1].HumanoidRootPart.Position).Magnitude < 100 then
                        if killauraready then 
                            HumanoidRootPart.CFrame = target[1].HumanoidRootPart.CFrame 
                            bindable:Fire()
                        else 
                            if game.PlaceId == 6152116144 or game.PlaceId == 11468159863 then 
                                HumanoidRootPart.CFrame = target[1].HumanoidRootPart.CFrame + Vector3.new(0, 0, 80) 
                            else 
                                HumanoidRootPart.CFrame = target[1].HumanoidRootPart.CFrame + Vector3.new(0, 80, 0)
                            end 
                        end 
                    end 
                end 
            end 
            task.wait()
        end 
    end 
})

section1:AddDropdown({
    Name = "Select Boss(s)",
    List = bossnames,
    Multi = true,
    Flag = "SBS",
    Callback = function(selected)
        bossess = selected 
    end 
})

section1:AddDropdown({
    Name = "Select Mob(s)",
    List = mobnames,
    Multi = true, 
    Flag = "SMS",
    Callback = function(selected)
        mobss = selected 
    end 
})

local oldmt55
oldmt55 = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    if (not checkcaller()) and killaura and (self.Name == "Handle_Initiate_S" or self.Name == "Handle_Initiate_S_") then 
        return 
    end 
    return oldmt55(self, ...)
end))

local lastindex = 1 
section2:AddToggle({
    Name = "Kill Aura",
    Value = false,
    Flag = "Kill Aura",
    Callback = function(state)
        killaura = state 
        while killaura do 
            if (not debounce) then
                lastindex = lastindex + 1 
                local currentindex = lastindex 
                local last = 9999
                local targ 
                if weapon == "fist_combat" then 
                    targ = "kick"
                else 
                    targ = "ground_slash"
                end 
                killauraready = true 
                bindable.Event:Wait()
                if lastindex == currentindex then 
                    task.wait(.2)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 2, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 1, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 2, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 3, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 4, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 919, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 1, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 2, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 3, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 4, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 919, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 1, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 2, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 3, targ)
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 4, targ)
                    last = game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(weapon, Player, Character, HumanoidRootPart, Humanoid, 919, targ)
                    repeat Heartbeat:Wait() until last ~= 9999 
                end 
                task.wait(.2)
                killauraready = false 
                task.wait(1.2)
                debounce = false 
            end 
            task.wait()
        end 
    end 
})

section2:AddDropdown({
    Name = "Select Weapon", 
    Nothing = "Select Weapon..",
    Flag = "SW",
    List = {"claw_Combat_Slash", "Sword_Combat_Slash", "Scythe_Combat_Slash", "fist_combat"}, 
    Callback = function(selected)
        weapon = selected 
    end 
})

section3:AddButton({
    Name = "Finish Pushups",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("Quest_add", "Players."..Player.Name..".PlayerGui.ExcessGuis.Push_Up_Gui.Holder.push_up_mat_local_script", os.clock(), {}, Player, "donepushuptraining")
    end 
})

section3:AddButton({
    Name = "Finish Meditation",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("Quest_add", "Players."..Player.Name..".PlayerGui.ExcessGuis.Meditate_gui.Holder.LocalScript", os.clock(), {}, Player, "donedoingmeditation")
    end 
})

section3:AddButton({
    Name = "Finish Cup Game",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("Quest_add", "Players."..Player.Name..".PlayerGui.ExcessGuis.cup_game_gui.Holder.cup_game_script123", os.clock(), {}, Player, "donecuptraining123asd")
    end 
})

section3:AddButton({
    Name = "Finish Target Practice",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("Quest_add", "Players."..Player.Name..".PlayerGui.ExcessGuis.chairui.Holder.LocalScript", os.clock(), {}, Player, "donetargettraining")
    end 
})

section4:AddButton({
    Name = "Muzan",
    Callback = function()
        if Workspace:FindFirstChild("Muzan") then 
            HumanoidRootPart.CFrame = CFrame.new(Workspace.Muzan.SpawnPos.Value) 
        end 
    end 
})

section4:AddButton({
    Name = "Doctor Higoshima",
    Callback = function()
        if Workspace:FindFirstChild("Doctor Higoshima") then 
            HumanoidRootPart.CFrame = Workspace["Doctor Higoshima"]:GetBoundingBox() 
        end 
    end 
})

section4:AddButton({
    Name = "Demon Flowers",
    Callback = function()
        if game:GetService("Workspace"):FindFirstChild("Demon_Flowers_Spawn") then
            for i,v in pairs(game:GetService("Workspace"):FindFirstChild("Demon_Flowers_Spawn"):GetChildren()) do 
                if v:IsA("Model") and (Vector3.new(v:GetBoundingBox()) - Vector3.zero).Magnitude < 10 then 
                    HumanoidRootPart.CFrame = v:GetBoundingBox()
                    for i = 1, 10 do 
                        HumanoidRootPart.Velocity = Vector3.zero
                        task.wait(.1)
                    end 
                end 
            end 
        end 
    end 
})

local nosun = false 
local oldmt 
oldmt = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    if nosun and self.Name == "Sun_Damage" then 
        return 
    end 
    return oldmt(self, ...)
end))

miscmain:AddToggle({
    Name = "Loot Chests",
    Value = false,
    Flag = "LC",
    Callback = function(state)
        ls = state 
        while ls do 
            for i,v in pairs(Workspace.Debree:GetChildren()) do 
                if v.Name == "Loot_Chest" and v:FindFirstChild("Add_To_Inventory") and v:FindFirstChild("Drops") then 
                    for i1,v1 in pairs(v.Drops:GetChildren()) do 
                        v.Add_To_Inventory:InvokeServer(v1.Name)
                        v1:Destroy()
                    end 
                end 
            end 
            task.wait()
        end 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Collect Money Bags",
    Value = false,
    Flag = "ACMB",
    Callback = function(state)
        acmd = state 
        while acmd do 
            if Workspace:FindFirstChild("Money bag") and Workspace["Money bag"]:FindFirstChild("take_money_thing") then 
                local x = TweenService:Create(HumanoidRootPart, TweenInfo.new((HumanoidRootPart.Position - workspace["Money bag"].Position).Magnitude / 500, Enum.EasingStyle.Linear), {CFrame = workspace["Money bag"].CFrame})
                x:Play()
                x.Completed:Wait()
                fireproximityprompt(Workspace["Money bag"]:FindFirstChild("take_money_thing"))
            end 
            task.wait()
        end 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Redeem Money Bags",
    Value = false,
    Flag = "ARMB",
    Callback = function(state)
        lro = state 
        while lro do 
            if Player.Backpack:FindFirstChild("Wen") then 
                Humanoid:EquipTool(Player.Backpack:FindFirstChild("Wen"))
                if Character:FindFirstChild("Wen") and Character.Wen:FindFirstChild("Handle") then 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("give_thing_thing_yem", game:GetService("ReplicatedStorage").Player_Data[Player.Name], Character:FindFirstChild("Wen").Handle, "Wen") 
                    if game:GetService("ReplicatedStorage").Player_Data[Player.Name].Inventory.Items:FindFirstChild("Wen") then 
                        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("delete_item", Player, game:GetService("ReplicatedStorage").Player_Data[Player.Name].Inventory.Items:FindFirstChild("Wen")) 
                    end 
                end 
            end 
            task.wait()
        end 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Buy Elixirs",
    Value = false,
    Flag = "ABE",
    Callback = function(state)
        abe = state 
        while abe do 
            game:GetService("ReplicatedStorage").purchase_elixirs:FireServer(see and see == "Regen" and 300 or 0, see and see == "Stamina" and 300 or 0, see and see == "Health" and 300 or 0)
            task.wait(.1)    
        end 
    end 
})

miscmoney:AddDropdown({
    Name = "Select Elixir",
    Nothing = "Select Elixir..",
    Flag = "SE",
    List = {"Health", "Stamina", "Regen"},
    Callback = function(selected)
        see = selected 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Convert Stam To Money",
    Value = false,
    Flag = "ACSTM",
    Callback = function(state)
        lb = state 
        while lb do 
            if game:GetService("ReplicatedStorage")["Player_Data"][Player.Name]:FindFirstChild("Yen") and game:GetService("ReplicatedStorage")["Player_Data"][Player.Name]:FindFirstChild("Yen").Value ~= 75000 then 
                print("yesyes")
                game:GetService("ReplicatedStorage").Sell_Items_tang:InvokeServer({["Stamina Elixir"] = 406}, 0, 0) 
            end 
            task.wait()
        end 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Convert Money To Bag",
    Value = false,
    Flag = "ACMTMB",
    Callback = function(state)
        lro = state 
        while lro do
            if game:GetService("ReplicatedStorage")["Player_Data"][Player.Name]:FindFirstChild("Yen") and game:GetService("ReplicatedStorage")["Player_Data"][Player.Name]:FindFirstChild("Yen").Value == 75000 and (not Character:FindFirstChild("Wen")) and (not Player.Backpack:FindFirstChild("Wen")) then 
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("transfer_money_to_money_bag", Player, ReplicatedStorage.Player_Data[Player.Name], 75000) 
            end 
            task.wait()
        end 
    end 
})

miscmoney:AddToggle({
    Name = "Auto Drop Money Bag",
    Value = false,
    Flag = "ADMB",
    Callback = function(state)
        lop = state 
        while lop do 
            if Player.Backpack:FindFirstChild("Wen") then 
                Humanoid:EquipTool(Player.Backpack.Wen)
            elseif Character:FindFirstChild("Wen") then 
                Character.Wen.Parent = workspace
            end 
            task.wait()
        end 
    end 
})

miscmain:AddToggle({
    Name = "Inf Stamina",
    Value = false,
    Flag = "IS",
    Callback = function(state)
        st = state 
        while st do 
            getrenv()._G:Stamina(-1)
            task.wait()
        end 
    end 
})

miscmain:AddToggle({
    Name = "Inf Breathing",
    Value = false,
    Flag = "IB",
    Callback = function(state)
        ib = state 
        while ib do 
            getrenv()._G:Breath(-1)
            task.wait()
        end 
    end 
})

miscmain:AddToggle({
    Name = "No Sun Damage",
    Value = false,
    Flag = "NSD",
    Callback = function(state)
        nosun = state 
    end 
})

miscmain:AddToggle({
    Name = "GodMode",
    Value = false,
    Flag = "GM",
    Callback = function(state)
        if state then 
            game.ReplicatedStorage.Remotes.heal_tang123asd:FireServer(true) 
            game.ReplicatedStorage.Remotes.heal_tang123asd:FireServer(true)
        else 
            game.ReplicatedStorage.Remotes.heal_tang123asd:FireServer(false)
            game.ReplicatedStorage.Remotes.heal_tang123asd:FireServer(false )
        end 
    end 
})

miscmain:AddToggle({
    Name = "GodSpeed",
    Value = false,
    Flag = "GS",
    Callback = function(state)
        if state then 
            game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(true)
        else 
            game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(false)
        end 
    end 
})

miscmain:AddToggle({
    Name = "Heart Ablaze",
    Value = false,
    Flag = "HA",
    Callback = function(state)
        if state then 
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(true)
        else 
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
        end 
    end 
})

miscmisc:AddButton({
    Name = "Reset",
    Callback = function()
        Humanoid.Health = -9e9 
    end 
})

miscmisc:AddSlider({
    Name = "WalkSpeed",
    Value = 16,
    Min = 16,
    Max = 500,
    Flag = "WS",
    Callback = function(value)
        ws = value 
    end 
})

miscmisc:AddSlider({
    Name = "JumpPower",
    Value = 50,
    Min = 50,
    Max = 1000,
    Flag = "JP",
    Callback = function(value)
        jp = value 
    end 
})

miscdungeon:AddToggle({
    Name = "Auto Collect Orbs",
    Value = false,
    Flag = "ACO",
    Callback = function(state)
        alr = state 
        while alr do 
            for i,v in pairs(Workspace.Map:GetChildren()) do 
                if v.Name:match("Stamina") or v.Name:match("Blood") or v.Name:match("XP") or v.Name:match("Insta") or v.Name:match("Life") or v.Name:match("Regen") or v.Name:match("Camouflage") or v.Name:match("DoublePoints") then 
                    for i1,v1 in pairs(v:GetChildren()) do 
                        if v1:FindFirstChild("TouchInterest") then 
                            firetouchinterest(HumanoidRootPart, v1, 0)
                            firetouchinterest(HumanoidRootPart, v1, 1)
                        end 
                    end 
                end 
            end 
            task.wait()
        end 
    end 
})

miscspins:AddToggle({
    Name = "Clan Spin",
    Value = false,
    Flag = "As",
    Callback = function(state)
        rm = state 
        while rm do 
            if (not table.find(clanss, game:GetService("ReplicatedStorage")["Player_Data"][Player.Name].Clan.Value)) then 
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("check_can_spin")
            end 
            task.wait()
        end 
    end 
})

miscspins:AddDropdown({
    Name = "Select Clan(s)",
    List = clans,
    Multi = true,
    Flag = "Clans",
    Nothing = "Select..",
    Callback = function(selected)
        clanss = selected 
    end 
})

miscspins:AddToggle({
    Name = "Demon Art Spin",
    Value = false,
    Flag = "DAS",
    Callback = function(state)
        das = state 
        while das do 
            if (not table.find(selectedones, game:GetService("ReplicatedStorage")["Player_Data"].BlxckShadowFxde["Demon_Art"].Value)) then 
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("check_can_spin_demon_art")
            end 
            task.wait()
        end 
    end 
})

miscspins:AddDropdown({
    Name = "Select Demon Art",
    List = demonarts,
    Multi = true,
    Flag = "SDA",
    Callback = function(selected)
        selectedones = selected 
    end 
})

misctroll:AddToggle({
    Name = "Fuck Everyones Ping",
    Value = false,
    Flag = "FEP",
    Callback = function(state)
        fep = state 
        while fep do 
            for i,v in pairs(Players:GetPlayers()) do 
                if v:FindFirstChild("Backpack") and v.Backpack:FindFirstChild("Map") then 
                    for i = 1, saa or 1 do 
                        v.Backpack.Map.LocalScript.RemoteEvent:FireServer(v.Backpack.Map) 
                    end 
                elseif v.Character and v.Character:FindFirstChild("Map") then 
                    for i = 1, saa or 1 do  
                        v.Character.Map.LocalScript.RemoteEvent:FireServer(v.Character.Map) 
                    end 
                end 
            end 
            task.wait()
        end 
    end 
})

misctroll:AddSlider({
    Name = "Spam Amount",
    Min = 1,
    Max = 100,
    Value = 1,
    Flag = "SAA",
    Callback = function(value)
        saa = value 
    end 
})

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do 
    v:Disable()
end
